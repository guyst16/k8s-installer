---
# tasks file for test

- name: Wait for connection to host for 20 mins
  ansible.builtin.wait_for_connection:
    timeout: 1200

- name: Upgrade all packages
  ansible.builtin.yum:
    name: '*'
    state: latest

- name: Add docker-ce repository
  ansible.builtin.command: "dnf config-manager --add-repo https://download.docker.com/linux/fedora/docker-ce.repo"

- name: Install containerd.io
  ansible.builtin.yum:
    name: containerd.io
    state: latest

- name: Install go
  ansible.builtin.yum:
    name: go
    state: latest

- name: Install git
  ansible.builtin.yum:
    name: git
    state: latest

- name: Install libselinux-python3
  ansible.builtin.yum:
    name: libselinux-python3
    state: latest

- name: Get Containerd default config file
  ansible.builtin.command: "containerd config default"
  register: default_containerd_config

- name: Copy default Containerd config to /etc/containerd/config.toml
  ansible.builtin.template: 
    src: "containerd.confa.j2"
    dest: "/etc/containerd/config.toml"
    mode: 0644

- name: Enable SystemdCgroup inside /etc/containerd/config.toml
  ansible.builtin.replace:
    path: /etc/containerd/config.toml
    regexp: 'SystemdCgroup = false'
    replace: 'SystemdCgroup = true'

- name: Restart & enable Containerd and daemon reload
  ansible.builtin.systemd:
    name: containerd
    state: restarted
    enabled: yes
    daemon_reload: yes

- name: Git clone container networking plugins # noqa: latest
  ansible.builtin.git:
    repo: "https://github.com/containernetworking/plugins.git"
    dest: "/tmp/network-plugins"
    version: HEAD

- name: Create all container networking plugins binaries
  ansible.builtin.command: "sh /tmp/network-plugins/build_linux.sh"

- name: Add kubernetes repository
  ansible.builtin.yum_repository:
    name: kubernetes
    description: k8s-packages
    baseurl: 'https://packages.cloud.google.com/yum/repos/kubernetes-el7-$basearch'
    enabled: true
    gpgcheck: yes
    gpgkey: https://packages.cloud.google.com/yum/doc/rpm-package-key.gpg
    exclude: kubelet kubeadm kubectl

- name: Set Selinux to permissive right now
  ansible.builtin.command: "setenforce 0"

- name: Set selinux to permissive in /etc/selinux/config
  ansible.builtin.replace:
    path: /etc/selinux/config
    regexp: '^SELINUX=enforcing$'
    replace: 'SELINUX=permissive'

- name: Insert modules for k8s
  ansible.builtin.blockinfile:
    path: /etc/modules-load.d/k8s.conf
    create: yes
    mode: 0644
    block: |
      overlay
      br_netfilter

- name: Modprobe overlay
  community.general.modprobe:
    name: overlay
    state: present

- name: Modprobe br_netfilter
  community.general.modprobe:
    name: br_netfilter
    state: present

- name: Insert sysctl configuration for k8s
  ansible.builtin.blockinfile:
    path: /etc/sysctl.d/k8s.conf
    create: yes
    mode: 0644
    block: |
      net.bridge.bridge-nf-call-iptables  = 1
      net.bridge.bridge-nf-call-ip6tables = 1
      net.ipv4.ip_forward                 = 1

- name: Aplly sysctl changes
  ansible.builtin.command: "sysctl --system"

- name: Restart dbus
  ansible.builtin.systemd:
    name: dbus
    state: restarted
   
- name: Restart & enable firewalld
  ansible.builtin.systemd:
    name: firewalld
    state: restarted
    enabled: yes

- name: Enable port 6443 in firewall
  ansible.posix.firewalld:
    port: 6443/tcp
    permanent: yes
    state: enabled

- name: Enable ports 2379-2380 in firewall
  ansible.posix.firewalld:
    port: 2379-2380/tcp
    permanent: yes
    state: enabled

- name: Enable ports 10250-10252 in firewall
  ansible.posix.firewalld:
    port: 10250-10252/tcp
    permanent: yes
    state: enabled

- name: Enable port 10255 in firewall
  ansible.posix.firewalld:
    port: 10255/tcp
    permanent: yes
    state: enabled

- name: Enable port 8472 in firewall
  ansible.posix.firewalld:
    port: 8472/udp
    permanent: yes
    state: enabled

- name: Enable ports 30000-32767 in firewall
  ansible.posix.firewalld:
    port: 30000-32767/tcp
    permanent: yes
    state: enabled

- name: Enable masquerade in zone
  ansible.posix.firewalld:
    masquerade: true
    permanent: yes
    state: enabled

- name: Restart firewalld
  ansible.builtin.systemd:
    name: firewalld
    state: restarted

- name: Install kubeadm, kubelet & kubectl
  ansible.builtin.yum:
    name: "{{ packages }}"
    disable_excludes: kubernetes
  vars:
    packages:
    - kubeadm
    - kubelet
    - kubectl

- name: Install k8s cluster
  ansible.builtin.command: "kubeadm init --pod-network-cidr=10.244.0.0/16"

- name: Enable kubelet
  ansible.builtin.systemd:
    name: kubelet
    enabled: yes

- name: Disable taint control-plane
  ansible.builtin.command: "kubectl taint node fedora node-role.kubernetes.io/control-plane-"
  retries: 12
  delay: 10
  register: result
  until: result.rc == 0


- name: Aplly flanneld network plugin
  ansible.builtin.command: "kubectl apply -f https://raw.githubusercontent.com/flannel-io/flannel/master/Documentation/kube-flannel.yml"

- name: Wait for /opt/cni/bin to be created
  ansible.builtin.wait_for:
    path: /opt/cni/bin

- name: Copy all container networking plugins binaries to /opt/cni/bin
  ansible.builtin.copy:
    src: /tmp/network-plugins/bin/
    dest: /opt/cni/bin
    mode: 0744
    remote_src: yes
    directory_mode: yes

- name: Chmod 0744 the /opt/cni/bin files
  ansible.builtin.file:
    path: /opt/cni/bin
    mode: 0744
    recurse: yes
