#!/bin/bash

# Source variables
# shellcheck source=/dev/null
MYKUBE_DIR="/usr/share/mykube"

source "$MYKUBE_DIR/ENV.sh"

display_logo()
{
    echo "                                                         "
    echo "     __  __  __   __    _  __  _   _   ____    _____     "
    echo "    |  \/  | \ \ / /   | |/ / | | | | | __ )  | ____|    "
    echo "    | |\/| |  \ V /    | ' /  | | | | |  _ \  |  _|      "
    echo "    | |  | |   | |     | . \  | |_| | | |_) | | |___     "
    echo "    |_|  |_|   |_|     |_|\_\  \___/  |____/  |_____|    "
    echo "                                                         "
    echo "                         %%%%%%%%                        "
    echo "                     #%%%%%%%%%%%%%%#                    "
    echo "                  %%%%%%%%%%%%%%%%%%%%%%                 "
    echo "              %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%             "
    echo "               #%%%%%%%%%%%%%%%%%%%%%%%%%%%              "
    echo "            %%%    %%%%%%%%%%%%%%%%%%%%,   %%%           "
    echo "            %%%%%%.   %%%%%%%%%%%%%%    %%%%%%           "
    echo "            %%%%%%%%%%   (%%%%%%%   #%%%%%%%%%           "
    echo "            %%%%%%%%%%%%%        %%%%%%%%%%%%%           "
    echo "            %%%%%%%%%%%%%%%%  %%%%%%%%%%%%%%%%           "
    echo "            %%%%%%%%%%%%%%%%  %%%%%%%%%%%%%%%%           "
    echo "             #%%%%%%%%%%%%%%  %%%%%%%%%%%%%%%            "
    echo "                 %%%%%%%%%%%  %%%%%%%%%%%                "
    echo "                    %%%%%%%%  %%%%%%%%                   "
    echo "                       /%%%%  %%%%(                      "
    echo "                           %  %                          "
}

# Show options
options_display()
{
    echo "options:"
    echo "--no-console-deployment  Disable console deployment."
    echo "--destroy                Destroy existing vms"
    echo "--connect                Connect to vm"
    echo "--help|-h                Print this Help."
  exit 2
}

display_help()
{
    # Display Help
    display_logo
    echo
    echo "MyKube is a new easy-to-use tool for creating your own virtual machine with k8s installed only by one click."
    echo
    echo "Syntax: ./start [-h|--help|--no-console-deployment|--destroy|--connect]"
    echo
    options_display
}

# Destroy existing vms
destroy_vms()
{
    virsh destroy "$VM_NAME";
    virsh undefine --remove-all-storage "$VM_NAME";
}

# Connect to vm
connect_to_vm()
{
    sshpass -p qwe123 \
        ssh liveuser@"$(virsh domifaddr --domain "$VM_NAME" | grep ':' | awk '{print $4}' | cut -d'/' -f1)"
}

# Options
OPTIONS=$(getopt -o h --long help,connect,destroy,no-console-deploymentg -- "$@")

VALID_ARGUMENTS=$?
if [ "$VALID_ARGUMENTS" != "0" ]; then
  options_display
fi

eval set -- "$OPTIONS"
while true; do
    case "$1" in
        -h | --help ) # Display help
            display_help
            exit 0;;
        --connect ) # Connect to vm
            connect_to_vm
            exit 0;;
        --destroy ) # Destroy vm
            destroy_vms
            exit 0;;
        --no-console-deployment ) # Deploy k8s without a console
             K8S_CONSOLE_DEPLOYMENT="false"
             shift;;
        # -- means the end of the arguments; drop this, and break out of the while loop
        -- ) shift; break;;
        * )  # Invalid option
            echo "argument $1 not found!"
            usage;;
    esac
done

# Validate there no unused arguments, else fail program
if [ "$#" != 0 ] ; then
    echo "Error: No arguments are allowed"
    options_display
    exit 0;
fi

# Declare vars for the ansible playbook
ANSIBLE_EXTRA_VARS="{'k8s_console_deployment':'$K8S_CONSOLE_DEPLOYMENT'}"

echo -e "Start libvirtd service..."
systemctl start libvirtd

echo -e "\nValidate that $OS_ISO_SHORT_NAME image is ready..."
if [ -f "$OS_ISO_FULL_PATH" ]; then
    echo -e "$OS_ISO_SHORT_NAME iso file exists"
else
    echo -e "File not exists\nStart download $OS_ISO_SHORT_NAME iso file..."
    wget "$OS_ISO_URL" -P "$OS_ISO_PATH"
    echo -e "Iso file is ready to be used"
fi

echo -e "\nValidate that $OS_ISO_SHORT_NAME os exists in osdb-info..."
if (osinfo-query os | grep -iq "$OS_ISO_SHORT_NAME"); then
    echo -e "$OS_ISO_SHORT_NAME os exists"
else
    echo -e "$OS_ISO_SHORT_NAME os does not exists\nStart  updating OS..."
    wget "$OS_INFO_DB_URL"
    osinfo-db-import "$OS_INFO_DB_FILE"
    echo -e "OS db updated"
fi


echo -e "\nTry deleting '$VM_NAME' if exists..."
destroy_vms

echo -e "\nCheck if default network is activated"
if virsh net-info --network default | grep Active | grep -q yes; then
    echo -e "default network is activated"
else
    echo -e "default network is not activated\nActivating default network"
    virsh net-start default;
fi

echo -e "\nStart deploying the new vm..."
virt-install -n "$VM_NAME" \
    --description "my test $OS_ISO_SHORT_NAME vm" \
    --os-variant="$VM_OS_VARIANT" --ram="$VM_MEMORY" \
    --vcpus="$VM_VCPUS" \
    --disk path="$VM_DISK_PATH",bus=virtio,size="$VM_DISK_SIZE" \
    --graphics=none \
    --location="$OS_ISO_FULL_PATH" \
    --initrd-inject=$MYKUBE_DIR/ks.cfg \
    --extra-args='inst.ks=file:/ks.cfg console=tty0 console=ttyS0,115200n8' \
    --noautoconsole \
    --wait=-1

# Waiting for IP address
echo -e "\nWait 20 seconds for IP address to get assigned..."
sleep 20

# VM IP address
echo -e "Find IP address"
VM_IP_ADDRESS=$(virsh domifaddr --domain "$VM_NAME" |
                grep ':' |
                awk '{print $4}' |
                cut -d'/' -f1)
echo -e "IP address is: $VM_IP_ADDRESS"

# Delete ssh fingerprint if exists
echo -e "Delete fingerprint from ~/.ssh/known_hosts if exists..."
ssh-keygen -f ~/.ssh/known_hosts -R "$VM_IP_ADDRESS"

echo -e "\nInstall k8s module for ansible"
ansible-galaxy collection install kubernetes.core

echo "$ANSIBLE_EXTRA_VARS"

echo -e "\nRun ansible-playbook for deploying k8s..."
ANSIBLE_HOST_KEY_CHECKING=false "$MYKUBE_DIR/ansible-playbook" install-k8.yaml -b \
    -e "ansible_password=qwe123" \
    -i "$VM_IP_ADDRESS", \
    -e "$ANSIBLE_EXTRA_VARS"