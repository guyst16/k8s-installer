#!/bin/bash

# Source variables
# shellcheck source=/dev/null
MYKUBE_DIR="/usr/share/mykube"
EXISTS_GREEN="\033[38;2;0;255;02mexists\033[m"
ACTIVATED_GREEN="\033[38;2;0;255;02mactivated\033[m"
CREATED_GREEN="\033[38;2;0;255;02mcreated\033[m"
DELETING_RED="\033[38;2;255;0;02mDeleting\033[m"

source "$MYKUBE_DIR/ENV.sh"

display_logo()
{
    echo "     __  __  __   __    _  __  _   _   ____    _____     "
    echo "    |  \/  | \ \ / /   | |/ / | | | | | __ )  | ____|    "
    echo "    | |\/| |  \ V /    | ' /  | | | | |  _ \  |  _|      "
    echo "    | |  | |   | |     | . \  | |_| | | |_) | | |___     "
    echo "    |_|  |_|   |_|     |_|\_\  \___/  |____/  |_____|    "
    echo "                                                         "    
    echo "                          :^!!^.                         "
    echo "                       :^!!77777!^:                      "
    echo "                   .:^!!!7777777???7~:.                  "
    echo "                 .~!!!!!7777777??????J?!.                "
    echo "                :.:^!!77777777?????J?7~:::               "
    echo "                ~!~:.:^!7777??????7~::~7J7               "
    echo "                ~!!7!~:.:~7????7~::^7JJJJ!               "
    echo "                !!777777~:.:!~::^7JJJJJJJ7               "
    echo "                !777777???7~ .7?JJJJJJJJJ7               "
    echo "                !77777?????? :JJJJJJJJJJJ!               "
    echo "                .^!7???????? :JJJJJJJJ?!^                "
    echo "                   .^!????J? :JJJJJ?7^.                  "
    echo "                      .^7?J? :JJ?7^.                     "
    echo "                         .~! :7^.                        "
}

# Show options
options_display()
{
    echo "options:"
    echo "--no-console-deployment  Disable console deployment."
    echo "--destroy                Destroy existing vms"
    echo "--connect                Connect to vm"
    echo "--help|-h                Print this Help."
}

# Display Help
display_help()
{
    display_logo
    echo
    echo "MyKube is a new easy-to-use tool for creating your own virtual machine with k8s installed only by one click."
    echo
    echo "Syntax: ./start [-h|--help|--no-console-deployment|--destroy|--connect]"
    echo
    options_display
}

# Destroy existing vms
destroy_vms()
{
    virsh destroy "$VM_NAME" &> /dev/null;
    virsh undefine --remove-all-storage "$VM_NAME" &> /dev/null;
}

# Connect to vm
connect_to_vm()
{
    sshpass -p qwe123 \
        ssh -o StrictHostKeyChecking=accept-new liveuser@"$(virsh domifaddr --domain "$VM_NAME" | grep ':' | awk '{print $4}' | cut -d'/' -f1)"
}

# Display login vlues
display_login()
{
    echo "Please configure your KubeConfig file before running any kubectl command:"
    echo "          export KUBECONFIG=~/.mykube/admin.conf"
    echo "Login to the dashboard here:"
    echo "          https://$VM_IP_ADDRESS:$K8S_CONSOLE_NODE_PORT"
    echo "With the token:"
    echo -n "          "
    cat ~/.mykube/admin-token
}

# Loading bar for a long command
loading_bar()
{
    load=("\\" "|" "/" "-")
    while kill -0 $PID 2> /dev/null;
    do
	    for l in "${load[@]}";
	    do
		    echo -ne "$l \r"
		    sleep 0.15
	    done
    done
    echo -n ""
}

# Options
OPTIONS=$(getopt -o h --long help,connect,destroy,no-console-deploymentg -- "$@")

VALID_ARGUMENTS=$?
if [ "$VALID_ARGUMENTS" != "0" ]; then
  options_display
fi

eval set -- "$OPTIONS"
while true; do
    case "$1" in
        -h | --help ) # Display help
            display_help
            exit 0;;
        --connect ) # Connect to vm
            connect_to_vm
            exit 0;;
        --destroy ) # Destroy vm
            destroy_vms
            exit 0;;
        --no-console-deployment ) # Deploy k8s without a console
             K8S_CONSOLE_DEPLOYMENT="false"
             shift;;
        # -- means the end of the arguments; drop this, and break out of the while loop
        -- ) shift; break;;
        * )  # Invalid option
            echo "argument $1 not found!"
            usage;;
    esac
done

# Validate there no unused arguments, else fail program
if [ "$#" != 0 ] ; then
    echo "Error: No arguments are allowed"
    options_display
    exit 0;
fi

# Declare vars for the ansible playbook
ANSIBLE_EXTRA_VARS="{'k8s_console_deployment':'$K8S_CONSOLE_DEPLOYMENT', 'k8s_console_node_port':'$K8S_CONSOLE_NODE_PORT'}"

# Create local MyKube directory
if [ ! -d ~/.mykube ];
then
    mkdir ~/.mykube
fi

echo -e "Validate that $OS_ISO_SHORT_NAME image is ready..."
if [ -f "$OS_ISO_FULL_PATH" ]; then
    echo -e "$OS_ISO_SHORT_NAME iso file $EXISTS_GREEN"
else
    echo -e "File not exists\nStart download $OS_ISO_SHORT_NAME iso file..."
    wget "$OS_ISO_URL" -P "$OS_ISO_PATH"
    echo -e "Iso file is ready to be used"
fi

echo -e "\nValidate that $OS_ISO_SHORT_NAME os exists in osdb-info..."
if (osinfo-query os | grep -iq "$OS_ISO_SHORT_NAME"); then
    echo -e "$OS_ISO_SHORT_NAME os $EXISTS_GREEN"
else
    echo -e "$OS_ISO_SHORT_NAME os does not exist\nStart  updating OS..."
    wget "$OS_INFO_DB_URL"
    osinfo-db-import "$OS_INFO_DB_FILE"
    echo -e "OS db updated"
fi


# Validate VM $EXISTS_GREEN
if (virsh list --all --name | grep -q "$VM_NAME"); then
    echo -e "$DELETING_RED old '$VM_NAME'"
    destroy_vms
fi 
echo -e "\nCheck if default network is activated"
if virsh net-info --network default | grep Active | grep -q yes; then
    echo -e "default network is $ACTIVATED_GREEN"
else
    echo -e "default network is not activated\nActivating default network"
    virsh net-start default;
    echo -e "default network is $ACTIVATED_GREEN"
fi

echo -e "\nStart deploying the new vm..."
virt-install -n "$VM_NAME" \
    --description "my test $OS_ISO_SHORT_NAME vm" \
    --os-variant="$VM_OS_VARIANT" --ram="$VM_MEMORY" \
    --vcpus="$VM_VCPUS" \
    --disk path="$VM_DISK_PATH",bus=virtio,size="$VM_DISK_SIZE" \
    --graphics=none \
    --location="$OS_ISO_FULL_PATH" \
    --initrd-inject=$MYKUBE_DIR/ks.cfg \
    --extra-args='inst.ks=file:/ks.cfg console=tty0 console=ttyS0,115200n8' \
    --noautoconsole \
    --wait=-1 \
    --quiet & PID=$!

loading_bar "$PID"

echo -ne "VM $CREATED_GREEN"

# Waiting for IP address
echo -e "Wait for IP address to get assigned..."
validate_ip=$(virsh domifaddr --domain myFedoraVM 2> /dev/null)
while [[ "$validate_ip" == "" ]];
do
    echo "IP not exists"
    sleep 1
    validate_ip=$(virsh domifaddr --domain myFedoraVM 2> /dev/null)
done
echo -e "IP address assigned"


# VM IP address
echo -e "Find IP address"
VM_IP_ADDRESS=$(virsh domifaddr --domain "$VM_NAME" |
                grep ':' |
                awk '{print $4}' |
                cut -d'/' -f1)
echo -e "IP address is: $VM_IP_ADDRESS"

# Delete ssh fingerprint if exists
echo -e "Delete fingerprint from ~/.ssh/known_hosts if exists..."
if (grep -q "$VM_IP_ADDRESS" ~/.ssh/known_hosts);
then
    ssh-keygen -f ~/.ssh/known_hosts -R "$VM_IP_ADDRESS"
fi

echo -e "\nInstall k8s module for ansible"
ansible-galaxy collection install kubernetes.core &> /dev/null

echo -e "\nRun ansible-playbook for deploying k8s...\n"
ANSIBLE_HOST_KEY_CHECKING=false ansible-playbook "$MYKUBE_DIR/ansible/install-k8.yaml" -b \
    -e "ansible_password=qwe123" \
    -i "$VM_IP_ADDRESS", \
    -e "$ANSIBLE_EXTRA_VARS" &> /dev/null & PID=$!

loading_bar "$PID"

display_login

echo -e "\nThank you for installing MyKube"
display_logo